---
AWSTemplateFormatVersion: 2010-09-09
Description: |
  EKS node group

Parameters:
  ParentStack:
    Description: Parent stack name
    Type: String
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  AppName:
    Description: Application name
    Type: String
  KeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EKS workers.
  # https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html
  # https://docs.aws.amazon.com/eks/latest/userguide/retrieve-ami-id.html
  EksWorkerAmiReleaseVersion:
    Description: Eks node AMI release version
    Type: String
    Default: 1.15.11-20200507
  EksWorkerInstanceType:
    Description: Eks worker instance type
    Type: String
    Default: t3.medium
  DesiredWorkersCapacity:
    Description: Desired worker nodes capacity
    Type: Number
    Default: 2
  MinWorkersCapacity:
    Description: Minimum worker nodes capacity
    Type: Number
    Default: 2
  MaxWorkersCapacity:
    Description: Maximum worker nodes capacity
    Type: Number
    Default: 3

Resources:
  
  # Eks Node group
  EksNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: !Sub ${AppName}-EksNodeGroup
      ClusterName: !Sub ${AppName}-EksCluster
      ScalingConfig:
        DesiredSize: !Ref DesiredWorkersCapacity
        MaxSize: !Ref MaxWorkersCapacity
        MinSize: !Ref MinWorkersCapacity
      ReleaseVersion: !Ref EksWorkerAmiReleaseVersion
      # The subnets to use for the Auto Scaling group that is created for your node group. 
      # These subnets must have the tag key kubernetes.io/cluster/CLUSTER_NAME with a value of shared, 
      # where CLUSTER_NAME is replaced with the name of your cluster.
      Subnets: 
        Fn::Split:
          - ','
          - Fn::ImportValue:
              !Sub ${AppName}-${ParentStack}-Private-Subnets
      NodeRole: !GetAtt EksNodeRole.Arn #required
      # AmiType: AL2_x86_64
      # # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-eks-nodegroup-remoteaccess.html
      RemoteAccess:
        Ec2SshKey: !Ref KeyName
        SourceSecurityGroups: 
          - !Ref EksWorkersSecurityGroup
      # DiskSize: 8
      InstanceTypes:
        - !Ref EksWorkerInstanceType

  # EKS workers security group
  EksWorkersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AppName}-EksWorkersSecurityGroup
      GroupDescription: Security group for EKS workers
      VpcId:
        Fn::ImportValue:
          !Sub ${AppName}-${ParentStack}-VPC
  
  # EKS SG rule for bastion access
  EksSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EksWorkersSecurityGroup
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub ${AppName}-${ParentStack}-Bastion-Security-Group
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      
  # Eks node role
  EksNodeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"